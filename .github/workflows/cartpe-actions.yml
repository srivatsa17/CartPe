name: CI/CD

on:
    push:
        branches: ["master", "development"]

env:
    # Django configurations
    DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
    DEBUG: ${{ vars.DEBUG }}

    # Database configurations
    DATABASE_ENGINE: ${{ vars.DATABASE_ENGINE }}
    DATABASE_NAME: ${{ vars.DATABASE_NAME }}
    DATABASE_USER: ${{ vars.DATABASE_USER }}
    DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
    DATABASE_HOST: ${{ vars.DATABASE_HOST }}
    DATABASE_PORT: ${{ vars.DATABASE_PORT }}

    # Cache configurations
    REDIS_HOST: ${{ vars.REDIS_HOST }}
    REDIS_PORT: ${{ vars.REDIS_PORT }}
    CACHE_BACKEND: ${{ vars.CACHE_BACKEND }}
    CACHE_CLIENT_CLASS: ${{ vars.CACHE_CLIENT_CLASS }}

    # Email configurations
    EMAIL_BACKEND: ${{ vars.EMAIL_BACKEND }}
    EMAIL_HOST: ${{ vars.EMAIL_HOST }}
    EMAIL_PORT: ${{ vars.EMAIL_PORT }}
    EMAIL_HOST_USER: ${{ secrets.EMAIL_HOST_USER }}
    EMAIL_HOST_PASSWORD: ${{ secrets.EMAIL_HOST_PASSWORD }}
    EMAIL_USE_TLS: ${{ vars.EMAIL_USE_TLS }}

    # Search engine configurations
    SEARCH_ENGINE: ${{ vars.SEARCH_ENGINE }}
    SEARCH_ENGINE_URL: ${{ vars.SEARCH_ENGINE_URL }}

    # Razorpay configurations
    RAZORPAY_KEY_ID: ${{ secrets.RAZORPAY_KEY_ID }}
    RAZORPAY_KEY_SECRET: ${{ secrets.RAZORPAY_KEY_SECRET }}

    # Google OAuth configurations
    GOOGLE_OAUTH_CLIENT_ID: ${{ secrets.GOOGLE_OAUTH_CLIENT_ID }}
    GOOGLE_OAUTH_CLIENT_SECRET: ${{ secrets.GOOGLE_OAUTH_CLIENT_SECRET }}

    # Frontend configurations
    BASE_FRONTEND_URL: ${{ vars.BASE_FRONTEND_URL }}

jobs:
    Unit-Test-And-Coverage:
        runs-on:  ubuntu-latest
        defaults:
            run:
                working-directory: 'backend/cartpe'
        strategy:
            max-parallel: 4
            matrix:
                python-version: ["3.11"]
        services:
            postgres:
                image: postgres:latest
                env:
                    POSTGRES_DB: ${{ secrets.DATABASE_NAME }}
                    POSTGRES_USER: ${{ secrets.DATABASE_USER }}
                    POSTGRES_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
                ports:
                    - 5432:5432
                # Set health checks to wait until postgres has started
                options:
                    --health-cmd pg_isready
                    --health-interval 10s
                    --health-timeout 5s
                    --health-retries 5
            redis:
                image: redis/redis-stack-server:latest
                ports:
                    - 6379:6379
                options: >-
                    --health-cmd "redis-cli ping"
                    --health-interval 10s
                    --health-timeout 5s
                    --health-retries 5
        steps:
        -   uses: actions/checkout@v4
        -   name: Set up Python ${{ matrix.python-version }}
            uses: actions/setup-python@v5
            with:
                python-version: ${{ matrix.python-version }}

        -   name: Install Dependencies
            run: |
                python3 -m pip install --upgrade pip
                pip3 install -r requirements.txt

        -   name: Migrate the db models
            run: |
                python3 manage.py makemigrations
                python3 manage.py migrate

        -   name: Run Tests
            run: coverage run manage.py test

        -   name: Collect coverage report
            run: coverage report -m --skip-covered

        -   name: Generate coverage report in xml format for Codecov
            run: coverage xml

        -   name: Upload coverage report to Codecov
            uses: codecov/codecov-action@v4
            with:
                token: ${{ secrets.CODECOV_TOKEN }}
                files: coverage.xml